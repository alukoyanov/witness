import Henta from 'henta';

export default class BotcmdBridge {
  henta: Henta;

  constructor(henta: Henta) {
    this.henta = henta;
  }

  init(henta: Henta) {
    const botcmdPlugin = henta.getPlugin('common/botcmd');
    botcmdPlugin.addType('user', {
      allowNull: true,
      handler: this.resolve.bind(this)
    });
  }

  async resolve(data) {
    const usersPlugin = this.henta.getPlugin('common/users');
    try {
      if (!data.argument.disallowReply && data.ctx.hasReplyMessage) {
        const reply = data.ctx.replyMessage;
        if (reply.senderId > 0) {
          const user = await usersPlugin.get(reply.senderId);
          if (user) {
            data.setIndex(data.index - 1);
            return [false, user];
          }
        }
      }

      const value = await usersPlugin.resolve(data.word)
      if (!value) {
        return [true, 'üéé –ò–≥—Ä–æ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º.']
      }

      if (data.argument.notSelf && value === data.ctx.user) {
        return [true, 'üéé –ù–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è.']
      }

      return [false, value]
    } catch (err) {
      return [true, 'üéé –í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.']
    }
  }
}
